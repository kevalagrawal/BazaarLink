BAZAARLINK API ROUTES & BACKEND DOCUMENTATION (FULL DETAIL)
============================================================

Base URL (Development): http://localhost:5000/api
Base URL (Production): https://bazaar-link-backend.vercel.app

---

# SERVER SETUP

- **Framework:** Express.js
- **Environment:** dotenv for env vars
- **CORS:** Enabled
- **Logging:** Morgan (dev mode)
- **Database:** MongoDB via Mongoose
- **Entry:** `server.js`
- **Routes Registered:**
  - `/api/auth` (authRoutes)
  - `/api/vendor` (vendorRoutes)
  - `/api/supplier` (supplierRoutes)
  - `/api/products` (productRoutes)
  - `/api/orders` (orderRoutes)
- **Error Handling:** Custom 404 and error handler middlewares
- **Serverless Support:** Only listens in development (for Vercel)

---

# AUTHENTICATION

- **JWT-based** authentication for all protected routes
- **Middleware:** `protect(roles)`
  - Checks for Bearer token, verifies JWT, attaches user to `req.user`, checks role if provided
  - Returns 401 if no/invalid token, 403 if role insufficient
- **Token Utility:** `generateToken(user)`
  - Signs `{ id, role }` with `JWT_SECRET`, expires in 7 days

## ROUTES

### POST /auth/register
Register a new user (vendor or supplier)
- **Request Body:**
  ```json
  {
    "name": "string",         // required
    "phone": "string",        // required, unique
    "location": "string",     // required
    "password": "string",     // required
    "role": "vendor|supplier",// required
    "kyc": { "aadhaar": "string", "gstin": "string" } // optional
  }
  ```
- **Response (201):**
  ```json
  {
    "_id": "string",
    "name": "string",
    "phone": "string",
    "location": "string",
    "role": "string",
    "token": "string"
  }
  ```
- **Errors:** 400 (missing fields, user exists)

### POST /auth/login
Login as vendor or supplier
- **Request Body:**
  ```json
  {
    "phone": "string",
    "password": "string"
  }
  ```
- **Response (200):**
  ```json
  {
    "_id": "string",
    "name": "string",
    "phone": "string",
    "location": "string",
    "role": "string",
    "token": "string"
  }
  ```
- **Errors:** 401 (invalid credentials)

---

# PRODUCT ROUTES

## GET /products
Get all available products from all suppliers
- **Response (200):** Array of products
  ```json
  [
    {
      "_id": "string",
      "name": "string",
      "unit": "string",
      "price": number,
      "stock": number,
      "isAvailable": boolean,
      "lowStockThreshold": number,
      "imageUrl": "string",
      "supplier": {
        "_id": "string",
        "name": "string"
      }
    }
  ]
  ```

## GET /products/:supplierId
Get all available products from a specific supplier
- **Params:** `supplierId` (string)
- **Response (200):** Same as above, filtered by supplier

## POST /products
Add a new product (supplier only)
- **Auth:** Bearer token, role: supplier
- **Request Body:**
  ```json
  {
    "name": "string",
    "unit": "string",
    "price": number,
    "stock": number
  }
  ```
- **Response (201):** Product object
- **Errors:** 400, 401, 403

---

# ORDER ROUTES

## GET /orders/vendor/:id
Get all orders for a specific vendor
- **Params:** `id` (vendor user id)
- **Response (200):**
  ```json
  [
    {
      "_id": "string",
      "vendor": "string",
      "supplier": {
        "_id": "string",
        "name": "string"
      },
      "items": [
        { "product": "string", "quantity": number }
      ],
      "type": "individual|group",
      "status": "string",
      "createdAt": "date"
    }
  ]
  ```

## GET /orders/supplier/:id
Get all orders for a specific supplier
- **Params:** `id` (supplier user id)
- **Response (200):**
  ```json
  [
    {
      "_id": "string",
      "vendor": {
        "_id": "string",
        "name": "string"
      },
      "supplier": "string",
      "items": [
        { "product": "string", "quantity": number }
      ],
      "type": "individual|group",
      "status": "string",
      "createdAt": "date"
    }
  ]
  ```

## PATCH /orders/:id/status
Update order status
- **Params:** `id` (order id)
- **Request Body:**
  ```json
  { "status": "string" }
  ```
- **Response (200):** Updated order object
- **Errors:** 404

---

# SUPPLIER ROUTES

## GET /supplier/profile
Get supplier's own profile
- **Auth:** Bearer token, role: supplier
- **Response (200):**
  ```json
  {
    "_id": "string",
    "name": "string",
    "phone": "string",
    "location": "string",
    "role": "supplier",
    "kyc": { "aadhaar": "string", "gstin": "string" }
  }
  ```

## POST /supplier/product
Add a new product (supplier only, with Cloudinary image upload)
- **Auth:** Bearer token, role: supplier
- **Content-Type:** multipart/form-data
- **Request Body:**
  - `image`: File (required, jpg/jpeg/png)
  - `name`: string (required)
  - `unit`: string (required)
  - `price`: number (required)
  - `stock`: number (required)
  - `lowStockThreshold`: number (optional)
- **Response (201):** Product object (with `imageUrl` from Cloudinary)
- **Errors:** 400 (missing fields or image), 401, 403

## PATCH /supplier/product/:id
Update product (price, stock, threshold)
- **Auth:** Bearer token, role: supplier
- **Params:** `id` (product id)
- **Request Body:**
  ```json
  {
    "price": number (optional),
    "stock": number (optional),
    "lowStockThreshold": number (optional)
  }
  ```
- **Response (200):** Updated product object

## GET /supplier/orders
Get all incoming orders for supplier (with product image and price)
- **Auth:** Bearer token, role: supplier
- **Response (200):** Array of orders (see above)

## PATCH /supplier/order/:id
Mark order as delivered
- **Auth:** Bearer token, role: supplier
- **Params:** `id` (order id)
- **Response (200):** Updated order object

## POST /supplier/product/:id/restock
Restock a product
- **Auth:** Bearer token, role: supplier
- **Params:** `id` (product id)
- **Request Body:**
  ```json
  { "quantity": number }
  ```
- **Response (200):** Updated product object

## GET /supplier/products/low-stock
Get all products with low stock
- **Auth:** Bearer token, role: supplier
- **Response (200):** Array of products (same as GET /products, filtered)

## GET /supplier/product/:id/stock-history
Get stock history for a product
- **Auth:** Bearer token, role: supplier
- **Params:** `id` (product id)
- **Response (200):**
  ```json
  [
    {
      "action": "ordered|restocked|adjusted",
      "quantity": number,
      "previousStock": number,
      "newStock": number,
      "timestamp": "date",
      "orderId": "string" (optional)
    }
  ]
  ```

---

# VENDOR ROUTES

## GET /vendor/profile
Get vendor's own profile
- **Auth:** Bearer token, role: vendor
- **Response (200):**
  ```json
  {
    "_id": "string",
    "name": "string",
    "phone": "string",
    "location": "string",
    "role": "vendor",
    "kyc": { "aadhaar": "string", "gstin": "string" }
  }
  ```

## GET /vendor/products
Get available products from suppliers in vendor's location (with image)
- **Auth:** Bearer token, role: vendor
- **Response (200):**
  ```json
  [
    {
      "_id": "string",
      "name": "string",
      "unit": "string",
      "price": number,
      "stock": number,
      "isAvailable": boolean,
      "lowStockThreshold": number,
      "imageUrl": "string",
      "supplier": {
        "_id": "string",
        "name": "string",
        "location": "string"
      }
    }
  ]
  ```

## GET /vendor/suppliers
View all registered suppliers
- **Auth:** Bearer token, role: vendor
- **Response (200):**
  ```json
  [
    {
      "_id": "string",
      "name": "string",
      "phone": "string",
      "location": "string"
    }
  ]
  ```

## POST /vendor/order
Place a new individual order
- **Auth:** Bearer token, role: vendor
- **Request Body:**
  ```json
  {
    "supplier": "string",
    "items": [ { "product": "string", "quantity": number } ],
    "type": "individual" (optional)
  }
  ```
- **Response (201):** Order object (see GET /vendor/orders)
- **Errors:** 400, 401, 403, 404

## POST /vendor/group-order
Join or create a group order
- **Auth:** Bearer token, role: vendor
- **Request Body:**
  ```json
  {
    "supplier": "string",
    "items": [ { "product": "string", "quantity": number } ]
  }
  ```
- **Response (201):** Order object (see GET /vendor/orders)
- **Errors:** 400, 401, 403, 404

## GET /vendor/orders
Get vendor's order history (with product image and price)
- **Auth:** Bearer token, role: vendor
- **Response (200):**
  ```json
  [
    {
      "_id": "string",
      "vendor": "string",
      "supplier": { "_id": "string", "name": "string" },
      "items": [
        {
          "product": {
            "_id": "string",
            "name": "string",
            "imageUrl": "string",
            "price": number
          },
          "quantity": number
        }
      ],
      "type": "individual|group",
      "status": "string",
      "createdAt": "date"
    }
  ]
  ```

## POST /vendor/review/:supplierId
Leave a review for a supplier
- **Auth:** Bearer token, role: vendor
- **Params:** `supplierId` (string)
- **Request Body:**
  ```json
  {
    "rating": number (1-5),
    "comment": "string" (optional)
  }
  ```
- **Response (201):**
  ```json
  {
    "_id": "string",
    "vendor": "string",
    "supplier": "string",
    "rating": number,
    "comment": "string",
    "createdAt": "date"
  }
  ```
- **Errors:** 400, 401, 403

---

# DATA MODELS

## User
- _id: ObjectId
- name: String (required)
- phone: String (required, unique)
- location: String (required)
- password: String (hashed, required)
- role: String ("vendor" or "supplier", required)
- kyc: Object (aadhaar, gstin, optional)
- averageRating: Virtual (from Review)
- timestamps: createdAt, updatedAt

## Product
- _id: ObjectId
- name: String (required)
- unit: String (required)
- price: Number (required)
- stock: Number (required, default 0)
- supplier: ObjectId (ref: User, required)
- isAvailable: Boolean (default true)
- lowStockThreshold: Number (default 10)
- imageUrl: String (default "")
- stockHistory: Array of stock changes (see below)
- timestamps: createdAt, updatedAt
- **Methods:**
  - `reduceStock(quantity, orderId)`: Decreases stock, logs to history, sets isAvailable
  - `addStock(quantity)`: Increases stock, logs to history, sets isAvailable
  - `isLowStock()`: Returns true if stock <= lowStockThreshold

### StockHistory Object
- action: String ("ordered", "restocked", "adjusted")
- quantity: Number
- previousStock: Number
- newStock: Number
- timestamp: Date
- orderId: ObjectId (optional)

## Order
- _id: ObjectId
- vendor: ObjectId (ref: User, required)
- supplier: ObjectId (ref: User, required)
- items: Array of { product: ObjectId, quantity: Number }
- type: String ("individual" or "group", default "individual")
- status: String ("pending", "confirmed", "delivered", default "pending")
- timestamps: createdAt, updatedAt

## Review
- _id: ObjectId
- vendor: ObjectId (ref: User, required)
- supplier: ObjectId (ref: User, required)
- rating: Number (1-5, required)
- comment: String (optional)
- timestamps: createdAt, updatedAt

---

# MIDDLEWARES

## protect(roles)
- Checks for Bearer token in Authorization header
- Verifies JWT, attaches user to `req.user`
- If `roles` provided, checks user role
- Returns 401 if not authorized, 403 if role insufficient

## validateStock
- Checks if all items in order exist, are available, and have sufficient stock
- Returns 400/404 if any check fails

## validateProductOwnership
- Checks if product exists and belongs to supplier
- Returns 404 if not found

## notFound
- Handles 404 errors for unknown routes

## errorHandler
- Handles all errors, returns stack in development

---

# UTILITIES

## generateToken(user)
- Signs JWT with `{ id, role }`, expires in 7 days

---

# DATABASE CONNECTION

- **File:** `config/db.js`
- Connects to MongoDB using `MONGO_URI` from environment
- Logs connection or exits on error

---

# AUTHENTICATION
- For protected routes, include the JWT token in the Authorization header:
  `Authorization: Bearer <token>`

# ERROR CODES
- 200: Success
- 201: Created
- 400: Bad Request (missing/invalid parameters, insufficient stock)
- 401: Unauthorized (invalid/missing token)
- 403: Forbidden (wrong role)
- 404: Not Found
- 500: Internal Server Error

---

# INVENTORY & IMAGE FEATURES
- Automatic stock reduction on order
- Stock validation (cannot order more than available)
- Product availability (isAvailable)
- Stock history for audit
- Low stock alerts (lowStockThreshold)
- Unsplash image auto-assignment for every product (imageUrl)
- All product and order endpoints return imageUrl for frontend display
- Product creation now requires image upload to Cloudinary (see POST /supplier/product)

---

# BUSINESS LOGIC NOTES
- **Order Placement:**
  - Validates all items for existence and stock before creating order
  - Reduces stock and logs to product history
- **Order Fulfillment:**
  - Supplier can mark order as delivered
- **Restocking:**
  - Supplier can restock product, logs to product history
- **Review System:**
  - Vendors can leave reviews for suppliers (1-5 stars, optional comment)
- **Location-based Product Discovery:**
  - Vendors see products from suppliers in their location
- **Role-based Access:**
  - All protected routes require correct user role

---

# END OF DOCUMENTATION 