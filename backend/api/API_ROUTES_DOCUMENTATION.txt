BAZAARLINK API ROUTES DOCUMENTATION (DETAILED)
===============================================

Base URL (Development): http://localhost:5000/api
Base URL (Production): https://bazaar-link-backend.vercel.app

---

# AUTHENTICATION ROUTES

## POST /auth/register
Register a new user (vendor or supplier)
- **Request Body:**
  ```json
  {
    "name": "string",         // required
    "phone": "string",        // required, unique
    "location": "string",     // required
    "password": "string",     // required
    "role": "vendor|supplier",// required
    "kyc": { ... }             // optional
  }
  ```
- **Response (201):**
  ```json
  {
    "_id": "string",
    "name": "string",
    "phone": "string",
    "location": "string",
    "role": "string",
    "token": "string"
  }
  ```
- **Errors:** 400 (missing fields, user exists)

## POST /auth/login
Login as vendor or supplier
- **Request Body:**
  ```json
  {
    "phone": "string",
    "password": "string"
  }
  ```
- **Response (200):**
  ```json
  {
    "_id": "string",
    "name": "string",
    "phone": "string",
    "location": "string",
    "role": "string",
    "token": "string"
  }
  ```
- **Errors:** 401 (invalid credentials)

---

# PRODUCT ROUTES

## GET /products
Get all available products from all suppliers
- **Response (200):** Array of products
  ```json
  [
    {
      "_id": "string",
      "name": "string",
      "unit": "string",
      "price": number,
      "stock": number,
      "isAvailable": boolean,
      "lowStockThreshold": number,
      "imageUrl": "string",
      "supplier": {
        "_id": "string",
        "name": "string"
      }
    }
  ]
  ```

## GET /products/:supplierId
Get all available products from a specific supplier
- **Params:** `supplierId` (string)
- **Response (200):** Same as above, filtered by supplier

## POST /products
Add a new product (supplier only)
- **Auth:** Bearer token, role: supplier
- **Request Body:**
  ```json
  {
    "name": "string",
    "unit": "string",
    "price": number,
    "stock": number
  }
  ```
- **Response (201):**
  ```json
  {
    "_id": "string",
    "name": "string",
    "unit": "string",
    "price": number,
    "stock": number,
    "isAvailable": boolean,
    "lowStockThreshold": number,
    "imageUrl": "string",
    "supplier": "string"
  }
  ```
- **Errors:** 400, 401, 403

---

# ORDER ROUTES

## GET /orders/vendor/:id
Get all orders for a specific vendor
- **Params:** `id` (vendor user id)
- **Response (200):**
  ```json
  [
    {
      "_id": "string",
      "vendor": "string",
      "supplier": {
        "_id": "string",
        "name": "string"
      },
      "items": [
        { "product": "string", "quantity": number }
      ],
      "type": "individual|group",
      "status": "string",
      "createdAt": "date"
    }
  ]
  ```

## GET /orders/supplier/:id
Get all orders for a specific supplier
- **Params:** `id` (supplier user id)
- **Response (200):**
  ```json
  [
    {
      "_id": "string",
      "vendor": {
        "_id": "string",
        "name": "string"
      },
      "supplier": "string",
      "items": [
        { "product": "string", "quantity": number }
      ],
      "type": "individual|group",
      "status": "string",
      "createdAt": "date"
    }
  ]
  ```

## PATCH /orders/:id/status
Update order status
- **Params:** `id` (order id)
- **Request Body:**
  ```json
  { "status": "string" }
  ```
- **Response (200):** Updated order object
- **Errors:** 404

---

# SUPPLIER ROUTES

## GET /supplier/profile
Get supplier's own profile
- **Auth:** Bearer token, role: supplier
- **Response (200):**
  ```json
  {
    "_id": "string",
    "name": "string",
    "phone": "string",
    "location": "string",
    "role": "supplier",
    "kyc": { ... }
  }
  ```

## POST /supplier/product
Add a new product (supplier only, with Unsplash image)
- **Auth:** Bearer token, role: supplier
- **Request Body:**
  ```json
  {
    "name": "string",
    "unit": "string",
    "price": number,
    "stock": number,
    "lowStockThreshold": number (optional)
  }
  ```
- **Response (201):**
  ```json
  {
    "_id": "string",
    "name": "string",
    "unit": "string",
    "price": number,
    "stock": number,
    "isAvailable": boolean,
    "lowStockThreshold": number,
    "imageUrl": "string",
    "supplier": "string"
  }
  ```

## PATCH /supplier/product/:id
Update product (price, stock, threshold)
- **Auth:** Bearer token, role: supplier
- **Params:** `id` (product id)
- **Request Body:**
  ```json
  {
    "price": number (optional),
    "stock": number (optional),
    "lowStockThreshold": number (optional)
  }
  ```
- **Response (200):** Updated product object

## GET /supplier/orders
Get all incoming orders for supplier (with product image and price)
- **Auth:** Bearer token, role: supplier
- **Response (200):**
  ```json
  [
    {
      "_id": "string",
      "vendor": { "_id": "string", "name": "string" },
      "supplier": "string",
      "items": [
        {
          "product": {
            "_id": "string",
            "name": "string",
            "price": number,
            "imageUrl": "string"
          },
          "quantity": number
        }
      ],
      "type": "individual|group",
      "status": "string",
      "createdAt": "date"
    }
  ]
  ```

## PATCH /supplier/order/:id
Mark order as delivered
- **Auth:** Bearer token, role: supplier
- **Params:** `id` (order id)
- **Response (200):** Updated order object

## POST /supplier/product/:id/restock
Restock a product
- **Auth:** Bearer token, role: supplier
- **Params:** `id` (product id)
- **Request Body:**
  ```json
  { "quantity": number }
  ```
- **Response (200):** Updated product object

## GET /supplier/products/low-stock
Get all products with low stock
- **Auth:** Bearer token, role: supplier
- **Response (200):** Array of products (same as GET /products, filtered)

## GET /supplier/product/:id/stock-history
Get stock history for a product
- **Auth:** Bearer token, role: supplier
- **Params:** `id` (product id)
- **Response (200):**
  ```json
  [
    {
      "action": "ordered|restocked|adjusted",
      "quantity": number,
      "previousStock": number,
      "newStock": number,
      "timestamp": "date",
      "orderId": "string" (optional)
    }
  ]
  ```

---

# VENDOR ROUTES

## GET /vendor/profile
Get vendor's own profile
- **Auth:** Bearer token, role: vendor
- **Response (200):**
  ```json
  {
    "_id": "string",
    "name": "string",
    "phone": "string",
    "location": "string",
    "role": "vendor",
    "kyc": { ... }
  }
  ```

## GET /vendor/products
Get available products from suppliers in vendor's location (with image)
- **Auth:** Bearer token, role: vendor
- **Response (200):**
  ```json
  [
    {
      "_id": "string",
      "name": "string",
      "unit": "string",
      "price": number,
      "stock": number,
      "isAvailable": boolean,
      "lowStockThreshold": number,
      "imageUrl": "string",
      "supplier": {
        "_id": "string",
        "name": "string",
        "location": "string"
      }
    }
  ]
  ```

## POST /vendor/order
Place a new individual order
- **Auth:** Bearer token, role: vendor
- **Request Body:**
  ```json
  {
    "supplier": "string",
    "items": [ { "product": "string", "quantity": number } ],
    "type": "individual" (optional)
  }
  ```
- **Response (201):** Order object (see GET /vendor/orders)
- **Errors:** 400, 401, 403, 404

## POST /vendor/group-order
Join or create a group order
- **Auth:** Bearer token, role: vendor
- **Request Body:**
  ```json
  {
    "supplier": "string",
    "items": [ { "product": "string", "quantity": number } ]
  }
  ```
- **Response (201):** Order object (see GET /vendor/orders)
- **Errors:** 400, 401, 403, 404

## GET /vendor/orders
Get vendor's order history (with product image and price)
- **Auth:** Bearer token, role: vendor
- **Response (200):**
  ```json
  [
    {
      "_id": "string",
      "vendor": "string",
      "supplier": { "_id": "string", "name": "string" },
      "items": [
        {
          "product": {
            "_id": "string",
            "name": "string",
            "imageUrl": "string",
            "price": number
          },
          "quantity": number
        }
      ],
      "type": "individual|group",
      "status": "string",
      "createdAt": "date"
    }
  ]
  ```

## POST /vendor/review/:supplierId
Leave a review for a supplier
- **Auth:** Bearer token, role: vendor
- **Params:** `supplierId` (string)
- **Request Body:**
  ```json
  {
    "rating": number (1-5),
    "comment": "string" (optional)
  }
  ```
- **Response (201):**
  ```json
  {
    "_id": "string",
    "vendor": "string",
    "supplier": "string",
    "rating": number,
    "comment": "string",
    "createdAt": "date"
  }
  ```
- **Errors:** 400, 401, 403

---

# DATA MODELS

## User
- _id: ObjectId
- name: String
- phone: String (unique)
- location: String
- password: String (hashed)
- role: String ("vendor" or "supplier")
- kyc: Object (optional)

## Product
- _id: ObjectId
- name: String
- unit: String
- price: Number
- stock: Number
- isAvailable: Boolean
- lowStockThreshold: Number
- imageUrl: String
- supplier: ObjectId (ref: User)
- stockHistory: Array of stock changes

## Order
- _id: ObjectId
- vendor: ObjectId (ref: User)
- supplier: ObjectId (ref: User)
- items: Array of { product: ObjectId, quantity: Number }
- type: String ("individual" or "group")
- status: String
- createdAt: Date

## Review
- _id: ObjectId
- vendor: ObjectId (ref: User)
- supplier: ObjectId (ref: User)
- rating: Number
- comment: String
- createdAt: Date

---

# AUTHENTICATION
- For protected routes, include the JWT token in the Authorization header:
  `Authorization: Bearer <token>`

# ERROR CODES
- 200: Success
- 201: Created
- 400: Bad Request (missing/invalid parameters, insufficient stock)
- 401: Unauthorized (invalid/missing token)
- 403: Forbidden (wrong role)
- 404: Not Found
- 500: Internal Server Error

---

# INVENTORY & IMAGE FEATURES
- Automatic stock reduction on order
- Stock validation (cannot order more than available)
- Product availability (isAvailable)
- Stock history for audit
- Low stock alerts (lowStockThreshold)
- Unsplash image auto-assignment for every product (imageUrl)
- All product and order endpoints return imageUrl for frontend display 